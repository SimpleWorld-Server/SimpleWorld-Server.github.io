{"version":3,"file":"index.js","sources":["../../src/node/markdownContainerPlugin.ts"],"sourcesContent":["import type Renderer from 'markdown-it/lib/renderer.mjs'\nimport type Token from 'markdown-it/lib/token.mjs'\n// eslint-disable-next-line import/no-rename-default\nimport container from 'markdown-it-container'\nimport type { Plugin, PluginObject } from 'vuepress/core'\nimport type { MarkdownEnv } from 'vuepress/markdown'\nimport type { LocaleConfig } from 'vuepress/shared'\nimport { ensureLeadingSlash, resolveLocalePath } from 'vuepress/shared'\nimport { colors, logger } from 'vuepress/utils'\n\n/**\n * Options for markdown-it-container\n */\nexport interface MarkdownItContainerOptions {\n  /**\n   * The marker of the container syntax\n   *\n   * @default ':'\n   * @see https://github.com/markdown-it/markdown-it-container#api\n   */\n  marker?: string\n\n  /**\n   * Renderer function for opening / closing tokens\n   *\n   * @see https://github.com/markdown-it/markdown-it-container#api\n   */\n  render?: MarkdownItContainerRenderFunction\n\n  /**\n   * Function to validate tail after opening marker, should return `true` on success\n   */\n  validate?: (params: string) => boolean\n}\n\nexport type MarkdownItContainerRenderFunction = (\n  tokens: Token[],\n  index: number,\n  options: unknown,\n  env: MarkdownEnv,\n  self: Renderer,\n) => string\n\nexport type RenderPlaceFunction = (info: string) => string\n\n/**\n * Options for @vuepress/plugin-markdown-container\n */\nexport interface MarkdownContainerPluginOptions\n  extends MarkdownItContainerOptions {\n  /**\n   * The type of the container\n   *\n   * It would be used as the `name` of the container\n   *\n   * @see https://github.com/markdown-it/markdown-it-container#api\n   */\n  type: string\n\n  /**\n   * Locales config for container\n   */\n  locales?: LocaleConfig<{\n    /**\n     * Default info of the container\n     *\n     * If this option is not specified, the default info will fallback to the\n     * uppercase of the `type` option\n     */\n    defaultInfo: string\n  }>\n\n  /**\n   * A function to render the starting tag of the container.\n   *\n   * This option will not take effect if you don't specify the `after` option.\n   */\n  before?: RenderPlaceFunction\n\n  /**\n   * A function to render the ending tag of the container.\n   *\n   * This option will not take effect if you don't specify the `before` option.\n   */\n  after?: RenderPlaceFunction\n}\n\nexport const markdownContainerPlugin = ({\n  // plugin options\n  type,\n  after,\n  before,\n  locales,\n\n  // raw options for markdown-it-container\n  validate,\n  marker,\n  render: renderOptions,\n}: MarkdownContainerPluginOptions): Plugin => {\n  const plugin: PluginObject = {\n    name: '@vuepress/plugin-markdown-container',\n    multiple: true,\n  }\n\n  // `type` option is required\n  if (!type) {\n    logger.warn(`[${plugin.name}] ${colors.magenta('type')} option is required`)\n    return plugin\n  }\n\n  let render = renderOptions\n\n  // if `render` option is not specified\n  // use `before` and `after` to generate render function\n  if (!render) {\n    let renderBefore: RenderPlaceFunction\n    let renderAfter: RenderPlaceFunction\n\n    if (before !== undefined && after !== undefined) {\n      // user defined\n      renderBefore = before\n      renderAfter = after\n    } else {\n      // fallback\n      renderBefore = (info: string): string =>\n        `<div class=\"custom-container ${type}\">${\n          info ? `<p class=\"custom-container-title\">${info}</p>` : ''\n        }\\n`\n      renderAfter = (): string => '</div>\\n'\n    }\n\n    // token info stack\n    const infoStack: string[] = []\n\n    render = (tokens, index, _, env): string => {\n      const token = tokens[index]\n\n      if (token.nesting === 1) {\n        // `before` tag\n\n        // resolve info (title)\n        let info = token.info.trim().slice(type.length).trim()\n\n        if (!info && locales) {\n          // locale\n          const { filePathRelative } = env\n          const relativePath = ensureLeadingSlash(filePathRelative ?? '')\n\n          const localePath = resolveLocalePath(locales, relativePath)\n          const localeData = locales[localePath] ?? {}\n\n          if (localeData.defaultInfo) {\n            info = localeData.defaultInfo\n          } else {\n            info = type.toUpperCase()\n          }\n        }\n\n        // push the info to stack\n        infoStack.push(info)\n\n        // render\n        return renderBefore(info)\n      }\n\n      // `after` tag\n\n      // pop the info from stack\n      const info = infoStack.pop() || ''\n\n      // render\n      return renderAfter(info)\n    }\n  }\n\n  // use markdown-it-container\n  plugin.extendsMarkdown = (md) => {\n    md.use(container, type, { render, validate, marker })\n  }\n\n  return plugin\n}\n"],"names":["markdownContainerPlugin","type","after","before","locales","validate","marker","renderOptions","plugin","logger","colors","render","renderBefore","renderAfter","info","infoStack","tokens","index","_","env","token","filePathRelative","relativePath","ensureLeadingSlash","localePath","resolveLocalePath","localeData","md","container"],"mappings":"2KAuFaA,EAA0B,CAAC,CAEtC,KAAAC,EACA,MAAAC,EACA,OAAAC,EACA,QAAAC,EAGA,SAAAC,EACA,OAAAC,EACA,OAAQC,CACV,IAA8C,CAC5C,MAAMC,EAAuB,CAC3B,KAAM,sCACN,SAAU,EACZ,EAGA,GAAI,CAACP,EACH,OAAAQ,EAAO,KAAK,IAAID,EAAO,IAAI,KAAKE,EAAO,QAAQ,MAAM,CAAC,qBAAqB,EACpEF,EAGT,IAAIG,EAASJ,EAIb,GAAI,CAACI,EAAQ,CACX,IAAIC,EACAC,EAEAV,IAAW,QAAaD,IAAU,QAEpCU,EAAeT,EACfU,EAAcX,IAGdU,EAAgBE,GACd,gCAAgCb,CAAI,KAClCa,EAAO,qCAAqCA,CAAI,OAAS,EAC3D;AAAA,EACFD,EAAc,IAAc;AAAA,GAI9B,MAAME,EAAsB,CAAA,EAE5BJ,EAAS,CAACK,EAAQC,EAAOC,EAAGC,IAAgB,CAC1C,MAAMC,EAAQJ,EAAOC,CAAK,EAE1B,GAAIG,EAAM,UAAY,EAAG,CAIvB,IAAIN,EAAOM,EAAM,KAAK,OAAO,MAAMnB,EAAK,MAAM,EAAE,KAAK,EAErD,GAAI,CAACa,GAAQV,EAAS,CAEpB,KAAM,CAAE,iBAAAiB,CAAiB,EAAIF,EACvBG,EAAeC,EAAmBF,GAAoB,EAAE,EAExDG,EAAaC,EAAkBrB,EAASkB,CAAY,EACpDI,EAAatB,EAAQoB,CAAU,GAAK,GAEtCE,EAAW,YACbZ,EAAOY,EAAW,YAElBZ,EAAOb,EAAK,YAEhB,CAAA,CAGA,OAAAc,EAAU,KAAKD,CAAI,EAGZF,EAAaE,CAAI,CAC1B,CAKA,MAAMA,EAAOC,EAAU,IAAA,GAAS,GAGhC,OAAOF,EAAYC,CAAI,CACzB,CACF,CAGA,OAAAN,EAAO,gBAAmBmB,GAAO,CAC/BA,EAAG,IAAIC,EAAW3B,EAAM,CAAE,OAAAU,EAAQ,SAAAN,EAAU,OAAAC,CAAO,CAAC,CACtD,EAEOE,CACT"}